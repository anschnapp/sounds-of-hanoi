define :playToneWithoutDelay do |tone|
  play tone, release: 0.1
end

define :playToneWithDelay do |tone|
  playToneWithoutDelay tone
  sleep 0.03
end

define :bubbleSort do | list|
  finished = false
  elementBeforeInsideIteration = nil
  
  loop do
    index = 0
    swappedInsideIteration = false
    size = list.size
    size.times do
      if index > 0
        elementBefore = list[index - 1]
        element = list[index]
        if elementBefore > element
          playToneWithoutDelay elementBefore
          playToneWithDelay element
          
          list[index - 1] = element
          list[index] = elementBefore
          swappedInsideIteration = true
        end
      end
      index = index + 1
    end
    if !swappedInsideIteration
      break
    end
    
    
  end
  return list
end




define :playList do |list|
  list.each do |element|
    playToneWithDelay element
  end
end


define :generateShuffledList do |size|
  # sounds in the list will all be in the spectrum of 40 to 115 and equaly distributed
  beginSound = 40.0
  lastSound = 115.0
  list = []
  sound = beginSound
  increaseSoundStep = (lastSound - beginSound) / size
  size.times do
    list << sound
    sound = sound + increaseSoundStep
  end
  return list.shuffle
end


shuffledList = generateShuffledList 100

print 'start playing initial shuffled list'
playList shuffledList
print 'finish playing initial shuffled list'
sleep 2

print 'start sorting and playing every touched number as a side effect'
orderedList = bubbleSort shuffledList
print 'finsish sorting and playing every touched number as a side effect'

sleep 2
print 'start playing ordered list'
playList orderedList
print 'finish playing ordered list'



